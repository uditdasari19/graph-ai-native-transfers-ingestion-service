name: Deploy Ingestion Service to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VM_HOST: ${{ secrets.AWS_EC2_HOST }}
      VM_USER: ${{ secrets.AWS_EC2_USERNAME }}
      VM_APP_PATH: ${{ secrets.VM_APP_PATH }}
      VM_APP_NAME: ingestion-service
    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_EC2_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo -e "Host vm\n\tHostName ${{ env.VM_HOST }}\n\tUser ${{ env.VM_USER }}\n\tIdentityFile ~/.ssh/deploy_key\n\tStrictHostKeyChecking no" > ~/.ssh/config

      - name: Update and restart application
        run: |
          # Connect to VM, clone or pull latest changes, and restart Docker containers
          ssh vm "if [ ! -d '${{ env.VM_APP_PATH }}' ]; then \
                  mkdir -p ${{ env.VM_APP_PATH }} && \
                  cd ${{ env.VM_APP_PATH }} && \
                  git clone https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git .; \
                  else \
                  cd ${{ env.VM_APP_PATH }} && \
                  git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git && \
                  git pull; \
                  fi && \
                  docker-compose down && \
                  docker-compose build && \
                  docker-compose up -d && \
                  docker ps | grep ${{ env.VM_APP_NAME }}"

      - name: Verify deployment
        run: |
          # Check if the container is running and healthy
          ssh vm "cd ${{ env.VM_APP_PATH }} && \
                  docker ps --filter name=${{ env.VM_APP_NAME }} --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' && \
                  docker logs --tail 10 ${{ env.VM_APP_NAME }}"
